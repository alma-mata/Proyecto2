
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000890  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080010e  0080010e  00000932  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001009  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a50  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00002ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f5  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055e  00000000  00000000  000037b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 02 	call	0x442	; 0x442 <main>
  9e:	0c 94 46 04 	jmp	0x88c	; 0x88c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeEEPROM>:
#include "EEPROM.h"

void writeEEPROM(uint8_t dato, uint16_t direccion)
{
	// Espera que termine la escritura anterior
	while (EECR & (1 << EEPE));		
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <writeEEPROM>
	// Asignar direccion de escritura
	EEAR = direccion;
  aa:	72 bd       	out	0x22, r23	; 34
  ac:	61 bd       	out	0x21, r22	; 33
	// Asignar dato a escribir
	EEDR = dato;
  ae:	80 bd       	out	0x20, r24	; 32
	// Setear en 1 el "master write enable"
	EECR |= (1 << EEMPE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
	// Empezar a escribir
	EECR |= (1 << EEPE);
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <readEEPROM>:
}

uint8_t readEEPROM(uint16_t direccion)
{
	// Espera que termine la escritura anterior
	while (EECR & (1 << EEPE));
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <readEEPROM>
	// Asignar direccion de escritura
	EEAR = direccion;
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
	// Empezar a leer
	EECR |= (1 << EERE);
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	08 95       	ret

000000d0 <ADC_init>:
	
	sei();
}

void ADC_init(void){
	ADMUX = 0;
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (canal_ADC & 0x1F); // AVcc como referencia
  d6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <canal_ADC>
  da:	90 81       	ld	r25, Z
  dc:	8f 71       	andi	r24, 0x1F	; 31
  de:	80 66       	ori	r24, 0x60	; 96
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
	ADCSRA = 0;
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
  ea:	80 81       	ld	r24, Z
  ec:	8f 68       	ori	r24, 0x8F	; 143
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  f8:	f8 94       	cli
	ADC_init();
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_init>
	PWM0_init();
  fe:	0e 94 43 03 	call	0x686	; 0x686 <PWM0_init>
	PWM1_init();
 102:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <PWM1_init>
	UART_init();
 106:	0e 94 ee 03 	call	0x7dc	; 0x7dc <UART_init>
	
	// Entradas y salidas	
	DDRD = (1 << PIND4) | (1 << PIND3) | (1 << PIND2);
 10a:	8c e1       	ldi	r24, 0x1C	; 28
 10c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1 << PORTD6) | (1 << PORTD5));
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	8f 79       	andi	r24, 0x9F	; 159
 112:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD6) | (1 << PORTD5);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	80 66       	ori	r24, 0x60	; 96
 118:	8b b9       	out	0x0b, r24	; 11
	
	// Habilitar interrupciones del Puerto D
	PCMSK2 |= (1 << PCINT22) | (1 << PCINT21);  // PD5–PD7
 11a:	ed e6       	ldi	r30, 0x6D	; 109
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 66       	ori	r24, 0x60	; 96
 122:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
 124:	e8 e6       	ldi	r30, 0x68	; 104
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	80 83       	st	Z, r24
	
	sei();
 12e:	78 94       	sei
 130:	08 95       	ret

00000132 <modo_MANUAL>:
	ADCSRA = 0;
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
}

void modo_MANUAL(void){
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
	dutyCycle_PB1(500 + (servo1 * 2000UL / 255));
 13a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <servo1>
 13e:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <servo1+0x1>
 142:	a0 ed       	ldi	r26, 0xD0	; 208
 144:	b7 e0       	ldi	r27, 0x07	; 7
 146:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 14a:	c1 2c       	mov	r12, r1
 14c:	d1 2c       	mov	r13, r1
 14e:	76 01       	movw	r14, r12
 150:	ca 94       	dec	r12
 152:	a7 01       	movw	r20, r14
 154:	96 01       	movw	r18, r12
 156:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 15a:	c9 01       	movw	r24, r18
 15c:	8c 50       	subi	r24, 0x0C	; 12
 15e:	9e 4f       	sbci	r25, 0xFE	; 254
 160:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <dutyCycle_PB1>
	dutyCycle_PB2(500 + (servo2 * 2000UL / 255));
 164:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <servo2>
 168:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <servo2+0x1>
 16c:	a0 ed       	ldi	r26, 0xD0	; 208
 16e:	b7 e0       	ldi	r27, 0x07	; 7
 170:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 174:	a7 01       	movw	r20, r14
 176:	96 01       	movw	r18, r12
 178:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 17c:	c9 01       	movw	r24, r18
 17e:	8c 50       	subi	r24, 0x0C	; 12
 180:	9e 4f       	sbci	r25, 0xFE	; 254
 182:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <dutyCycle_PB2>
	dutyCycle_PB3(500 + (servo3 * 2000UL / 255));
 186:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <servo3>
 18a:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <servo3+0x1>
 18e:	a0 ed       	ldi	r26, 0xD0	; 208
 190:	b7 e0       	ldi	r27, 0x07	; 7
 192:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 196:	a7 01       	movw	r20, r14
 198:	96 01       	movw	r18, r12
 19a:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 19e:	c9 01       	movw	r24, r18
 1a0:	8c 50       	subi	r24, 0x0C	; 12
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	0e 94 4e 03 	call	0x69c	; 0x69c <dutyCycle_PB3>
	if (servo4 > 63) servo4 = 63;
 1a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo4>
 1ac:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo4+0x1>
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	91 05       	cpc	r25, r1
 1b4:	30 f0       	brcs	.+12     	; 0x1c2 <modo_MANUAL+0x90>
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <servo4+0x1>
 1be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <servo4>
	dutyCycle_PB4(500 + (servo4 * 2000UL / 255));
 1c2:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <servo4>
 1c6:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <servo4+0x1>
 1ca:	a0 ed       	ldi	r26, 0xD0	; 208
 1cc:	b7 e0       	ldi	r27, 0x07	; 7
 1ce:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 1de:	c9 01       	movw	r24, r18
 1e0:	8c 50       	subi	r24, 0x0C	; 12
 1e2:	9e 4f       	sbci	r25, 0xFE	; 254
 1e4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dutyCycle_PB4>
}
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	08 95       	ret

000001f2 <set_motor>:

void set_motor(uint8_t n_motor, uint8_t valor){
	switch (n_motor){
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	79 f0       	breq	.+30     	; 0x214 <set_motor+0x22>
 1f6:	18 f4       	brcc	.+6      	; 0x1fe <set_motor+0xc>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	31 f0       	breq	.+12     	; 0x208 <set_motor+0x16>
 1fc:	1c c0       	rjmp	.+56     	; 0x236 <set_motor+0x44>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	79 f0       	breq	.+30     	; 0x220 <set_motor+0x2e>
 202:	84 30       	cpi	r24, 0x04	; 4
 204:	99 f0       	breq	.+38     	; 0x22c <set_motor+0x3a>
 206:	17 c0       	rjmp	.+46     	; 0x236 <set_motor+0x44>
		case 1: servo1 = valor; break;
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <servo1+0x1>
 20e:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <servo1>
 212:	11 c0       	rjmp	.+34     	; 0x236 <set_motor+0x44>
		case 2: servo2 = valor; break;
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <servo2+0x1>
 21a:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <servo2>
 21e:	0b c0       	rjmp	.+22     	; 0x236 <set_motor+0x44>
		case 3: servo3 = valor; break;
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <servo3+0x1>
 226:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <servo3>
 22a:	05 c0       	rjmp	.+10     	; 0x236 <set_motor+0x44>
		case 4: servo4 = valor; break;
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <servo4+0x1>
 232:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <servo4>
	}
	modo_MANUAL();
 236:	0e 94 99 00 	call	0x132	; 0x132 <modo_MANUAL>
 23a:	08 95       	ret

0000023c <set_estado>:
}

void set_estado(void){
	switch (estado_actual){
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	69 f0       	breq	.+26     	; 0x25e <set_estado+0x22>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	a1 f0       	breq	.+40     	; 0x270 <set_estado+0x34>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	e1 f4       	brne	.+56     	; 0x284 <set_estado+0x48>
		case 1: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD2); 
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	83 7e       	andi	r24, 0xE3	; 227
 250:	84 60       	ori	r24, 0x04	; 4
 252:	8b b9       	out	0x0b, r24	; 11
			send_STRING("M\n");
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 02 04 	call	0x804	; 0x804 <send_STRING>
			break;
 25c:	08 95       	ret
		case 2: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD3); 
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	83 7e       	andi	r24, 0xE3	; 227
 262:	88 60       	ori	r24, 0x08	; 8
 264:	8b b9       	out	0x0b, r24	; 11
			send_STRING("E\n");
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 02 04 	call	0x804	; 0x804 <send_STRING>
			break;
 26e:	08 95       	ret
		case 3: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD4); 
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	83 7e       	andi	r24, 0xE3	; 227
 274:	80 61       	ori	r24, 0x10	; 16
 276:	8b b9       	out	0x0b, r24	; 11
			estado_actual = 0;
 278:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			send_STRING("S\n");
 27c:	87 e0       	ldi	r24, 0x07	; 7
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 02 04 	call	0x804	; 0x804 <send_STRING>
 284:	08 95       	ret

00000286 <set_estadoUART>:
			break;
	}
}

void set_estadoUART(unsigned char estado){
	switch(estado){
 286:	8d 34       	cpi	r24, 0x4D	; 77
 288:	29 f0       	breq	.+10     	; 0x294 <set_estadoUART+0xe>
 28a:	83 35       	cpi	r24, 0x53	; 83
 28c:	99 f0       	breq	.+38     	; 0x2b4 <set_estadoUART+0x2e>
 28e:	85 34       	cpi	r24, 0x45	; 69
 290:	b9 f4       	brne	.+46     	; 0x2c0 <set_estadoUART+0x3a>
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <set_estadoUART+0x1e>
		case 'M': 
		PORTD = (PORTD & 0xE3) | (1 << PORTD2); 
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	83 7e       	andi	r24, 0xE3	; 227
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	8b b9       	out	0x0b, r24	; 11
		estado_actual = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 2a2:	08 95       	ret
		case 'E': 
		PORTD = (PORTD & 0xE3) | (1 << PORTD3); 
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	83 7e       	andi	r24, 0xE3	; 227
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	8b b9       	out	0x0b, r24	; 11
		estado_actual = 2;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 2b2:	08 95       	ret
		case 'S': 
		PORTD = (PORTD & 0xE3) | (1 << PORTD4);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	83 7e       	andi	r24, 0xE3	; 227
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	8b b9       	out	0x0b, r24	; 11
		estado_actual = 0;
 2bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	08 95       	ret

000002c2 <leer_EEPROOM>:
		break;
	}
}

void leer_EEPROOM(unsigned char posicion) {
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	switch (posicion){
 2c6:	82 34       	cpi	r24, 0x42	; 66
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <leer_EEPROOM+0x20>
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <leer_EEPROOM+0x10>
 2cc:	81 34       	cpi	r24, 0x41	; 65
 2ce:	31 f0       	breq	.+12     	; 0x2dc <leer_EEPROOM+0x1a>
 2d0:	13 c0       	rjmp	.+38     	; 0x2f8 <leer_EEPROOM+0x36>
 2d2:	83 34       	cpi	r24, 0x43	; 67
 2d4:	51 f0       	breq	.+20     	; 0x2ea <leer_EEPROOM+0x28>
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <leer_EEPROOM+0x30>
 2da:	0e c0       	rjmp	.+28     	; 0x2f8 <leer_EEPROOM+0x36>
		case 'A': pos_read = 0; break;
 2dc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pos_read>
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <leer_EEPROOM+0x36>
		case 'B': pos_read = 1; break;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pos_read>
 2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <leer_EEPROOM+0x36>
		case 'C': pos_read = 2; break;
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pos_read>
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <leer_EEPROOM+0x36>
		case 'D': pos_read = 3; break;
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pos_read>
	}
	uint8_t direccion = direcciones_EEPROM[pos_read];
 2f8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <pos_read>
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e6 5f       	subi	r30, 0xF6	; 246
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	d0 81       	ld	r29, Z
	for (uint8_t i = 0; i < 4; i++)
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	55 c0       	rjmp	.+170    	; 0x3b2 <leer_EEPROOM+0xf0>
	{
		uint8_t dato_leido = readEEPROM(direccion);
 308:	8d 2f       	mov	r24, r29
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
		switch (i){
 310:	c1 30       	cpi	r28, 0x01	; 1
 312:	c1 f0       	breq	.+48     	; 0x344 <leer_EEPROOM+0x82>
 314:	28 f0       	brcs	.+10     	; 0x320 <leer_EEPROOM+0x5e>
 316:	c2 30       	cpi	r28, 0x02	; 2
 318:	39 f1       	breq	.+78     	; 0x368 <leer_EEPROOM+0xa6>
 31a:	c3 30       	cpi	r28, 0x03	; 3
 31c:	b9 f1       	breq	.+110    	; 0x38c <leer_EEPROOM+0xca>
 31e:	47 c0       	rjmp	.+142    	; 0x3ae <leer_EEPROOM+0xec>
		case 0: dutyCycle_PB1(500 + (dato_leido * 2000UL / 255)); break;
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	a0 ed       	ldi	r26, 0xD0	; 208
 326:	b7 e0       	ldi	r27, 0x07	; 7
 328:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 338:	c9 01       	movw	r24, r18
 33a:	8c 50       	subi	r24, 0x0C	; 12
 33c:	9e 4f       	sbci	r25, 0xFE	; 254
 33e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <dutyCycle_PB1>
 342:	35 c0       	rjmp	.+106    	; 0x3ae <leer_EEPROOM+0xec>
		case 1: dutyCycle_PB2(500 + (dato_leido * 2000UL / 255)); break;
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	a0 ed       	ldi	r26, 0xD0	; 208
 34a:	b7 e0       	ldi	r27, 0x07	; 7
 34c:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 350:	2f ef       	ldi	r18, 0xFF	; 255
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 35c:	c9 01       	movw	r24, r18
 35e:	8c 50       	subi	r24, 0x0C	; 12
 360:	9e 4f       	sbci	r25, 0xFE	; 254
 362:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <dutyCycle_PB2>
 366:	23 c0       	rjmp	.+70     	; 0x3ae <leer_EEPROOM+0xec>
		case 2: dutyCycle_PB3(500 + (dato_leido * 2000UL / 255)); break;
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	a0 ed       	ldi	r26, 0xD0	; 208
 36e:	b7 e0       	ldi	r27, 0x07	; 7
 370:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 380:	c9 01       	movw	r24, r18
 382:	8c 50       	subi	r24, 0x0C	; 12
 384:	9e 4f       	sbci	r25, 0xFE	; 254
 386:	0e 94 4e 03 	call	0x69c	; 0x69c <dutyCycle_PB3>
 38a:	11 c0       	rjmp	.+34     	; 0x3ae <leer_EEPROOM+0xec>
		case 3: dutyCycle_PB4(500 + (dato_leido * 2000UL / 255)); break;
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	a0 ed       	ldi	r26, 0xD0	; 208
 392:	b7 e0       	ldi	r27, 0x07	; 7
 394:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	0e 94 15 04 	call	0x82a	; 0x82a <__udivmodsi4>
 3a4:	c9 01       	movw	r24, r18
 3a6:	8c 50       	subi	r24, 0x0C	; 12
 3a8:	9e 4f       	sbci	r25, 0xFE	; 254
 3aa:	0e 94 53 03 	call	0x6a6	; 0x6a6 <dutyCycle_PB4>
		}
		direccion++;
 3ae:	df 5f       	subi	r29, 0xFF	; 255
		case 'B': pos_read = 1; break;
		case 'C': pos_read = 2; break;
		case 'D': pos_read = 3; break;
	}
	uint8_t direccion = direcciones_EEPROM[pos_read];
	for (uint8_t i = 0; i < 4; i++)
 3b0:	cf 5f       	subi	r28, 0xFF	; 255
 3b2:	c4 30       	cpi	r28, 0x04	; 4
 3b4:	08 f4       	brcc	.+2      	; 0x3b8 <leer_EEPROOM+0xf6>
 3b6:	a8 cf       	rjmp	.-176    	; 0x308 <leer_EEPROOM+0x46>
		case 3: dutyCycle_PB4(500 + (dato_leido * 2000UL / 255)); break;
		}
		direccion++;
	}
	
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <escribir_EEPROM>:
void escribir_EEPROM(void) {
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
	uint8_t direccion = direcciones_EEPROM[pos_write];
 3c2:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <pos_write>
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	e6 5f       	subi	r30, 0xF6	; 246
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	d0 81       	ld	r29, Z
	for (uint8_t i = 0; i < 4; i++)
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
 3d0:	2d c0       	rjmp	.+90     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		switch (i){
 3d2:	c1 30       	cpi	r28, 0x01	; 1
 3d4:	79 f0       	breq	.+30     	; 0x3f4 <escribir_EEPROM+0x36>
 3d6:	28 f0       	brcs	.+10     	; 0x3e2 <escribir_EEPROM+0x24>
 3d8:	c2 30       	cpi	r28, 0x02	; 2
 3da:	a9 f0       	breq	.+42     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3dc:	c3 30       	cpi	r28, 0x03	; 3
 3de:	e1 f0       	breq	.+56     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3e0:	23 c0       	rjmp	.+70     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			case 0: writeEEPROM(servo1,direccion); break;
 3e2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <servo1>
 3e6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <servo1+0x1>
 3ea:	6d 2f       	mov	r22, r29
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
 3f2:	1a c0       	rjmp	.+52     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			case 1: writeEEPROM(servo2,direccion); break;
 3f4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo2>
 3f8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo2+0x1>
 3fc:	6d 2f       	mov	r22, r29
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
 404:	11 c0       	rjmp	.+34     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			case 2: writeEEPROM(servo3,direccion); break;
 406:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <servo3>
 40a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <servo3+0x1>
 40e:	6d 2f       	mov	r22, r29
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
 416:	08 c0       	rjmp	.+16     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			case 3: writeEEPROM(servo4,direccion); break;
 418:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo4>
 41c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo4+0x1>
 420:	6d 2f       	mov	r22, r29
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		}
		direccion++;
 428:	df 5f       	subi	r29, 0xFF	; 255
	}
	
}
void escribir_EEPROM(void) {
	uint8_t direccion = direcciones_EEPROM[pos_write];
	for (uint8_t i = 0; i < 4; i++)
 42a:	cf 5f       	subi	r28, 0xFF	; 255
 42c:	c4 30       	cpi	r28, 0x04	; 4
 42e:	88 f2       	brcs	.-94     	; 0x3d2 <escribir_EEPROM+0x14>
			case 2: writeEEPROM(servo3,direccion); break;
			case 3: writeEEPROM(servo4,direccion); break;
		}
		direccion++;
	}
	pos_write = (pos_write + 1) & 0x03;
 430:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pos_write>
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	83 70       	andi	r24, 0x03	; 3
 438:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pos_write>
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <main>:
/****************************************/
// Función principal
int main(void)
{
    /* Replace with your application code */
	setup();
 442:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>
	set_estado();
 446:	0e 94 1e 01 	call	0x23c	; 0x23c <set_estado>
    while (1) 
    {
		if (dato_ENVIADO)
 44a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dato_ENVIADO>
 44e:	88 23       	and	r24, r24
 450:	09 f4       	brne	.+2      	; 0x454 <main+0x12>
 452:	4f c0       	rjmp	.+158    	; 0x4f2 <main+0xb0>
		{
			dato_ENVIADO = 0;
 454:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dato_ENVIADO>
			if (tipo_feed == 'E')
 458:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tipo_feed>
 45c:	85 34       	cpi	r24, 0x45	; 69
 45e:	29 f4       	brne	.+10     	; 0x46a <main+0x28>
			{
				set_estadoUART(received_RX);
 460:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <received_RX>
 464:	0e 94 43 01 	call	0x286	; 0x286 <set_estadoUART>
 468:	44 c0       	rjmp	.+136    	; 0x4f2 <main+0xb0>
			}
			else if ((tipo_feed == 'P') && (estado_actual == 2))
 46a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tipo_feed>
 46e:	80 35       	cpi	r24, 0x50	; 80
 470:	49 f4       	brne	.+18     	; 0x484 <main+0x42>
 472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	29 f4       	brne	.+10     	; 0x484 <main+0x42>
			{
				leer_EEPROOM(received_RX);
 47a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <received_RX>
 47e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <leer_EEPROOM>
 482:	37 c0       	rjmp	.+110    	; 0x4f2 <main+0xb0>
			}
			else if ((tipo_feed == 'W') && (estado_actual == 0))
 484:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tipo_feed>
 488:	87 35       	cpi	r24, 0x57	; 87
 48a:	51 f4       	brne	.+20     	; 0x4a0 <main+0x5e>
 48c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 490:	81 11       	cpse	r24, r1
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <main+0x5e>
			{
				set_motor(1, received_RX);
 494:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <received_RX>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <set_motor>
 49e:	29 c0       	rjmp	.+82     	; 0x4f2 <main+0xb0>
			}
			else if ((tipo_feed == 'X') && (estado_actual == 0))
 4a0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tipo_feed>
 4a4:	88 35       	cpi	r24, 0x58	; 88
 4a6:	51 f4       	brne	.+20     	; 0x4bc <main+0x7a>
 4a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ac:	81 11       	cpse	r24, r1
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <main+0x7a>
			{
				set_motor(2, received_RX);
 4b0:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <received_RX>
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <set_motor>
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <main+0xb0>
			}
			else if ((tipo_feed == 'Y') && (estado_actual == 0))
 4bc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tipo_feed>
 4c0:	89 35       	cpi	r24, 0x59	; 89
 4c2:	51 f4       	brne	.+20     	; 0x4d8 <main+0x96>
 4c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4c8:	81 11       	cpse	r24, r1
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <main+0x96>
			{
				set_motor(3, received_RX);
 4cc:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <received_RX>
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <set_motor>
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <main+0xb0>
			}
			else if ((tipo_feed == 'Z') && (estado_actual == 0))
 4d8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tipo_feed>
 4dc:	8a 35       	cpi	r24, 0x5A	; 90
 4de:	49 f4       	brne	.+18     	; 0x4f2 <main+0xb0>
 4e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e4:	81 11       	cpse	r24, r1
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <main+0xb0>
			{
				set_motor(4, received_RX);
 4e8:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <received_RX>
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <set_motor>
			}
		}
		
		if (estado_actual == 1)
 4f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	09 f0       	breq	.+2      	; 0x4fc <main+0xba>
 4fa:	a7 cf       	rjmp	.-178    	; 0x44a <main+0x8>
		{
			modo_MANUAL();
 4fc:	0e 94 99 00 	call	0x132	; 0x132 <modo_MANUAL>
			if (accion_activa == 2)
 500:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <accion_activa>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	09 f0       	breq	.+2      	; 0x50a <main+0xc8>
 508:	a0 cf       	rjmp	.-192    	; 0x44a <main+0x8>
			{
				accion_activa = 0;
 50a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <accion_activa>
				escribir_EEPROM();
 50e:	0e 94 df 01 	call	0x3be	; 0x3be <escribir_EEPROM>
 512:	9b cf       	rjmp	.-202    	; 0x44a <main+0x8>

00000514 <__vector_21>:
	}
	pos_write = (pos_write + 1) & 0x03;
}
/****************************************/
// Subrutinas de Interrupcion
ISR(ADC_vect){
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
	switch (canal_ADC){
 526:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <canal_ADC>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	71 f0       	breq	.+28     	; 0x54a <__vector_21+0x36>
 52e:	28 f0       	brcs	.+10     	; 0x53a <__vector_21+0x26>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	99 f0       	breq	.+38     	; 0x55a <__vector_21+0x46>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	c9 f0       	breq	.+50     	; 0x56a <__vector_21+0x56>
 538:	1f c0       	rjmp	.+62     	; 0x578 <__vector_21+0x64>
		case 0: servo1 = ADCH; break;
 53a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <servo1+0x1>
 544:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <servo1>
 548:	17 c0       	rjmp	.+46     	; 0x578 <__vector_21+0x64>
		case 1: servo2 = ADCH; break;
 54a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <servo2+0x1>
 554:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <servo2>
 558:	0f c0       	rjmp	.+30     	; 0x578 <__vector_21+0x64>
		case 2: servo3 = ADCH; break;
 55a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <servo3+0x1>
 564:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <servo3>
 568:	07 c0       	rjmp	.+14     	; 0x578 <__vector_21+0x64>
		case 3: servo4 = ADCH; break;
 56a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <servo4+0x1>
 574:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <servo4>
	}
	canal_ADC = (canal_ADC + 1) % 4;
 578:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <canal_ADC>
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	83 70       	andi	r24, 0x03	; 3
 582:	90 78       	andi	r25, 0x80	; 128
 584:	99 23       	and	r25, r25
 586:	24 f4       	brge	.+8      	; 0x590 <__vector_21+0x7c>
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	8c 6f       	ori	r24, 0xFC	; 252
 58c:	9f 6f       	ori	r25, 0xFF	; 255
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <canal_ADC>
	ADMUX = (ADMUX & 0xF0) | (canal_ADC & 0x1F);
 594:	ec e7       	ldi	r30, 0x7C	; 124
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	90 81       	ld	r25, Z
 59a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <canal_ADC>
 59e:	90 7f       	andi	r25, 0xF0	; 240
 5a0:	8f 71       	andi	r24, 0x1F	; 31
 5a2:	89 2b       	or	r24, r25
 5a4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 5a6:	ea e7       	ldi	r30, 0x7A	; 122
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	80 83       	st	Z, r24
}
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <__vector_5>:

ISR(PCINT2_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	accion_activa = 0;
 5e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <accion_activa>
	if (!(PIND & (1 << PIND5))) // Cambiar ESTADO
 5e8:	4d 99       	sbic	0x09, 5	; 9
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__vector_5+0x3a>
	{
		estado_actual++;
 5ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f0:	8f 5f       	subi	r24, 0xFF	; 255
 5f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		set_estado();
 5f6:	0e 94 1e 01 	call	0x23c	; 0x23c <set_estado>
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <__vector_5+0x44>
	}
	else if (!(PIND & (1 << PIND6))) // Guardar EEPROM
 5fc:	4e 99       	sbic	0x09, 6	; 9
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <__vector_5+0x44>
	{
		accion_activa = 2;
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <accion_activa>
	}
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_18>:

ISR(USART_RX_vect){
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	uint8_t byte = UDR0;
 63a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	binario_buffer[binario_index++] = byte;
 63e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	9e 0f       	add	r25, r30
 646:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	ea 5d       	subi	r30, 0xDA	; 218
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	80 83       	st	Z, r24
	if (binario_index >= 2)
 652:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	68 f0       	brcs	.+26     	; 0x674 <__vector_18+0x4c>
	{
		tipo_feed = binario_buffer[0];
 65a:	e6 e2       	ldi	r30, 0x26	; 38
 65c:	f1 e0       	ldi	r31, 0x01	; 1
 65e:	80 81       	ld	r24, Z
 660:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tipo_feed>
		received_RX = binario_buffer[1];
 664:	81 81       	ldd	r24, Z+1	; 0x01
 666:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <received_RX>
		
		binario_index = 0;
 66a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		dato_ENVIADO = 1;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <dato_ENVIADO>
	}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <PWM0_init>:
void dutyCycle_PB4(uint16_t dutyCycle) {
	pulse_SERVO2 = dutyCycle;
}

void dutyCycle_PB5(uint16_t dutyCycle) {
	pulse_SERVO3 = dutyCycle;
 686:	84 b1       	in	r24, 0x04	; 4
 688:	88 63       	ori	r24, 0x38	; 56
 68a:	84 b9       	out	0x04, r24	; 4
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	84 bd       	out	0x24, r24	; 36
 690:	85 bd       	out	0x25, r24	; 37
 692:	94 e6       	ldi	r25, 0x64	; 100
 694:	97 bd       	out	0x27, r25	; 39
 696:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 69a:	08 95       	ret

0000069c <dutyCycle_PB3>:
 69c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <pulse_SERVO1+0x1>
 6a0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pulse_SERVO1>
 6a4:	08 95       	ret

000006a6 <dutyCycle_PB4>:
 6a6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <pulse_SERVO2+0x1>
 6aa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pulse_SERVO2>
 6ae:	08 95       	ret

000006b0 <__vector_14>:
}

/****************************************/
// Subrutinas de Interrupcion
ISR(TIMER0_COMPA_vect) {
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
	contador_pulso++;
 6ca:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador_pulso>
 6ce:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <contador_pulso+0x1>
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <contador_pulso+0x1>
 6d8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contador_pulso>
	if (contador_pulso >= 400) contador_pulso = 0;
 6dc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador_pulso>
 6e0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <contador_pulso+0x1>
 6e4:	80 39       	cpi	r24, 0x90	; 144
 6e6:	91 40       	sbci	r25, 0x01	; 1
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__vector_14+0x42>
 6ea:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <contador_pulso+0x1>
 6ee:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <contador_pulso>
	if (contador_pulso == 0)
 6f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador_pulso>
 6f6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <contador_pulso+0x1>
 6fa:	89 2b       	or	r24, r25
 6fc:	21 f4       	brne	.+8      	; 0x706 <__vector_14+0x56>
	{
		PORTB |= (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5);
 6fe:	85 b1       	in	r24, 0x05	; 5
 700:	88 63       	ori	r24, 0x38	; 56
 702:	85 b9       	out	0x05, r24	; 5
 704:	44 c0       	rjmp	.+136    	; 0x78e <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO1 / 50))
 706:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <pulse_SERVO1>
 70a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <pulse_SERVO1+0x1>
 70e:	36 95       	lsr	r19
 710:	27 95       	ror	r18
 712:	ab e7       	ldi	r26, 0x7B	; 123
 714:	b4 e1       	ldi	r27, 0x14	; 20
 716:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <contador_pulso>
 722:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <contador_pulso+0x1>
 726:	82 17       	cp	r24, r18
 728:	93 07       	cpc	r25, r19
 72a:	21 f4       	brne	.+8      	; 0x734 <__vector_14+0x84>
	{
		PORTB &= ~(1 << PORTB3);
 72c:	85 b1       	in	r24, 0x05	; 5
 72e:	87 7f       	andi	r24, 0xF7	; 247
 730:	85 b9       	out	0x05, r24	; 5
 732:	2d c0       	rjmp	.+90     	; 0x78e <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO2 / 50))
 734:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <pulse_SERVO2>
 738:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <pulse_SERVO2+0x1>
 73c:	36 95       	lsr	r19
 73e:	27 95       	ror	r18
 740:	ab e7       	ldi	r26, 0x7B	; 123
 742:	b4 e1       	ldi	r27, 0x14	; 20
 744:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <contador_pulso>
 750:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <contador_pulso+0x1>
 754:	82 17       	cp	r24, r18
 756:	93 07       	cpc	r25, r19
 758:	21 f4       	brne	.+8      	; 0x762 <__vector_14+0xb2>
	{
		PORTB &= ~(1 << PORTB4);
 75a:	85 b1       	in	r24, 0x05	; 5
 75c:	8f 7e       	andi	r24, 0xEF	; 239
 75e:	85 b9       	out	0x05, r24	; 5
 760:	16 c0       	rjmp	.+44     	; 0x78e <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO3 / 50))
 762:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <pulse_SERVO3>
 766:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <pulse_SERVO3+0x1>
 76a:	36 95       	lsr	r19
 76c:	27 95       	ror	r18
 76e:	ab e7       	ldi	r26, 0x7B	; 123
 770:	b4 e1       	ldi	r27, 0x14	; 20
 772:	0e 94 37 04 	call	0x86e	; 0x86e <__umulhisi3>
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <contador_pulso>
 77e:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <contador_pulso+0x1>
 782:	82 17       	cp	r24, r18
 784:	93 07       	cpc	r25, r19
 786:	19 f4       	brne	.+6      	; 0x78e <__vector_14+0xde>
	{
		PORTB &= ~(1 << PORTB5);
 788:	85 b1       	in	r24, 0x05	; 5
 78a:	8f 7d       	andi	r24, 0xDF	; 223
 78c:	85 b9       	out	0x05, r24	; 5
	}
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	7f 91       	pop	r23
 798:	6f 91       	pop	r22
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <PWM1_init>:

#include "PWM1.h"

void PWM1_init(void) {
	// PB1 (OCR1A) y PB2 (OCR1B)
	DDRB |= (1 << PINB1) | (1 << PINB2);
 7a8:	84 b1       	in	r24, 0x04	; 4
 7aa:	86 60       	ori	r24, 0x06	; 6
 7ac:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 7ae:	82 ea       	ldi	r24, 0xA2	; 162
 7b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
 7b4:	82 e1       	ldi	r24, 0x12	; 18
 7b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 20000;
 7ba:	80 e2       	ldi	r24, 0x20	; 32
 7bc:	9e e4       	ldi	r25, 0x4E	; 78
 7be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 7c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 7c6:	08 95       	ret

000007c8 <dutyCycle_PB1>:
}

void dutyCycle_PB1(uint16_t dutyCycle){
	OCR1A = dutyCycle;
 7c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7d0:	08 95       	ret

000007d2 <dutyCycle_PB2>:
}

void dutyCycle_PB2(uint16_t dutyCycle){
	OCR1B = dutyCycle;	
 7d2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7d6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7da:	08 95       	ret

000007dc <UART_init>:
 */ 

#include "UART.h"

void UART_init(void){
	UBRR0 = 103;
 7dc:	87 e6       	ldi	r24, 0x67	; 103
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 7e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); //Rx int. | Rxen | Txen
 7e8:	88 e9       	ldi	r24, 0x98	; 152
 7ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //Async. | No parity | 1 stop | 8 data
 7ee:	86 e0       	ldi	r24, 0x06	; 6
 7f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 7f4:	08 95       	ret

000007f6 <send_CHAR>:
}

void send_CHAR(unsigned char caracter){
	while (!(UCSR0A & (1 << UDRE0))); //Revisar si UDR está vacío
 7f6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7fa:	95 ff       	sbrs	r25, 5
 7fc:	fc cf       	rjmp	.-8      	; 0x7f6 <send_CHAR>
	UDR0 = caracter;
 7fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 802:	08 95       	ret

00000804 <send_STRING>:
}

void send_STRING(char* texto){
 804:	0f 93       	push	r16
 806:	1f 93       	push	r17
 808:	cf 93       	push	r28
 80a:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 80c:	c0 e0       	ldi	r28, 0x00	; 0
	while (texto[i] != '\0'){
 80e:	03 c0       	rjmp	.+6      	; 0x816 <send_STRING+0x12>
		send_CHAR(texto[i]);
 810:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <send_CHAR>
		i++;
 814:	cf 5f       	subi	r28, 0xFF	; 255
	UDR0 = caracter;
}

void send_STRING(char* texto){
	uint8_t i = 0;
	while (texto[i] != '\0'){
 816:	f8 01       	movw	r30, r16
 818:	ec 0f       	add	r30, r28
 81a:	f1 1d       	adc	r31, r1
 81c:	80 81       	ld	r24, Z
 81e:	81 11       	cpse	r24, r1
 820:	f7 cf       	rjmp	.-18     	; 0x810 <send_STRING+0xc>
		send_CHAR(texto[i]);
		i++;
	}
 822:	cf 91       	pop	r28
 824:	1f 91       	pop	r17
 826:	0f 91       	pop	r16
 828:	08 95       	ret

0000082a <__udivmodsi4>:
 82a:	a1 e2       	ldi	r26, 0x21	; 33
 82c:	1a 2e       	mov	r1, r26
 82e:	aa 1b       	sub	r26, r26
 830:	bb 1b       	sub	r27, r27
 832:	fd 01       	movw	r30, r26
 834:	0d c0       	rjmp	.+26     	; 0x850 <__udivmodsi4_ep>

00000836 <__udivmodsi4_loop>:
 836:	aa 1f       	adc	r26, r26
 838:	bb 1f       	adc	r27, r27
 83a:	ee 1f       	adc	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	a2 17       	cp	r26, r18
 840:	b3 07       	cpc	r27, r19
 842:	e4 07       	cpc	r30, r20
 844:	f5 07       	cpc	r31, r21
 846:	20 f0       	brcs	.+8      	; 0x850 <__udivmodsi4_ep>
 848:	a2 1b       	sub	r26, r18
 84a:	b3 0b       	sbc	r27, r19
 84c:	e4 0b       	sbc	r30, r20
 84e:	f5 0b       	sbc	r31, r21

00000850 <__udivmodsi4_ep>:
 850:	66 1f       	adc	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	1a 94       	dec	r1
 85a:	69 f7       	brne	.-38     	; 0x836 <__udivmodsi4_loop>
 85c:	60 95       	com	r22
 85e:	70 95       	com	r23
 860:	80 95       	com	r24
 862:	90 95       	com	r25
 864:	9b 01       	movw	r18, r22
 866:	ac 01       	movw	r20, r24
 868:	bd 01       	movw	r22, r26
 86a:	cf 01       	movw	r24, r30
 86c:	08 95       	ret

0000086e <__umulhisi3>:
 86e:	a2 9f       	mul	r26, r18
 870:	b0 01       	movw	r22, r0
 872:	b3 9f       	mul	r27, r19
 874:	c0 01       	movw	r24, r0
 876:	a3 9f       	mul	r26, r19
 878:	70 0d       	add	r23, r0
 87a:	81 1d       	adc	r24, r1
 87c:	11 24       	eor	r1, r1
 87e:	91 1d       	adc	r25, r1
 880:	b2 9f       	mul	r27, r18
 882:	70 0d       	add	r23, r0
 884:	81 1d       	adc	r24, r1
 886:	11 24       	eor	r1, r1
 888:	91 1d       	adc	r25, r1
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>
