
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000881  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00000c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cb  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
	DDRD = (1 << DDD7) | (1 << DDD6);
	sei();
}

void ADC_init(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (canal_ADC & 0x1F); // AVcc como referencia
  96:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <canal_ADC>
  9a:	90 81       	ld	r25, Z
  9c:	8f 71       	andi	r24, 0x1F	; 31
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	89 2b       	or	r24, r25
  a2:	80 83       	st	Z, r24
	ADCSRA = 0;
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
  aa:	80 81       	ld	r24, Z
  ac:	8f 68       	ori	r24, 0x8F	; 143
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  b8:	f8 94       	cli
	ADC_init();
  ba:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM1_init();
  be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <PWM1_init>
	
	DDRD = (1 << DDD7) | (1 << DDD6);
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	8a b9       	out	0x0a, r24	; 10
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <mover_servos>:
	ADCSRA = 0;
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
}

void mover_servos(void){
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
	dutyCycle_PB1(500 + (servo1 * 2000UL / 1023));
  d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <servo1>
  d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <servo1+0x1>
  da:	a0 ed       	ldi	r26, 0xD0	; 208
  dc:	b7 e0       	ldi	r27, 0x07	; 7
  de:	0e 94 1f 01 	call	0x23e	; 0x23e <__umulhisi3>
  e2:	0f 2e       	mov	r0, r31
  e4:	cc 24       	eor	r12, r12
  e6:	ca 94       	dec	r12
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	df 2e       	mov	r13, r31
  ec:	e1 2c       	mov	r14, r1
  ee:	f1 2c       	mov	r15, r1
  f0:	f0 2d       	mov	r31, r0
  f2:	a7 01       	movw	r20, r14
  f4:	96 01       	movw	r18, r12
  f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodsi4>
  fa:	c9 01       	movw	r24, r18
  fc:	8c 50       	subi	r24, 0x0C	; 12
  fe:	9e 4f       	sbci	r25, 0xFE	; 254
 100:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <dutyCycle_PB1>
	dutyCycle_PB2(500 + (servo2 * 2000UL / 1023));
 104:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	a0 ed       	ldi	r26, 0xD0	; 208
 10e:	b7 e0       	ldi	r27, 0x07	; 7
 110:	0e 94 1f 01 	call	0x23e	; 0x23e <__umulhisi3>
 114:	a7 01       	movw	r20, r14
 116:	96 01       	movw	r18, r12
 118:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodsi4>
 11c:	c9 01       	movw	r24, r18
 11e:	8c 50       	subi	r24, 0x0C	; 12
 120:	9e 4f       	sbci	r25, 0xFE	; 254
 122:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <dutyCycle_PB2>
}
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	08 95       	ret

00000130 <main>:
/****************************************/
// Función principal
int main(void)
{
    /* Replace with your application code */
	setup();
 130:	0e 94 5c 00 	call	0xb8	; 0xb8 <setup>
    while (1) 
    {
		mover_servos();
 134:	0e 94 65 00 	call	0xca	; 0xca <mover_servos>
 138:	fd cf       	rjmp	.-6      	; 0x134 <main+0x4>

0000013a <__vector_21>:
	dutyCycle_PB1(500 + (servo1 * 2000UL / 1023));
	dutyCycle_PB2(500 + (servo2 * 2000UL / 1023));
}
/****************************************/
// Subrutinas de Interrupcion
ISR(ADC_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	switch (canal_ADC){
 14c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <canal_ADC>
 150:	88 23       	and	r24, r24
 152:	19 f0       	breq	.+6      	; 0x15a <__vector_21+0x20>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	51 f0       	breq	.+20     	; 0x16c <__vector_21+0x32>
 158:	11 c0       	rjmp	.+34     	; 0x17c <__vector_21+0x42>
		case 0: servo1 = ADC; break;
 15a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 15e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 162:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servo1+0x1>
 166:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servo1>
 16a:	08 c0       	rjmp	.+16     	; 0x17c <__vector_21+0x42>
		case 1: servo2 = ADC; break;
 16c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 170:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	canal_ADC = (canal_ADC + 1) % 2;
 17c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <canal_ADC>
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	81 70       	andi	r24, 0x01	; 1
 186:	90 78       	andi	r25, 0x80	; 128
 188:	99 23       	and	r25, r25
 18a:	24 f4       	brge	.+8      	; 0x194 <__vector_21+0x5a>
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	8e 6f       	ori	r24, 0xFE	; 254
 190:	9f 6f       	ori	r25, 0xFF	; 255
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <canal_ADC>
	ADMUX = (ADMUX & 0xF0) | (canal_ADC & 0x03);
 198:	ec e7       	ldi	r30, 0x7C	; 124
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	90 81       	ld	r25, Z
 19e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <canal_ADC>
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	83 70       	andi	r24, 0x03	; 3
 1a6:	89 2b       	or	r24, r25
 1a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <PWM1_init>:

#include "PWM1.h"

void PWM1_init(void) {
	// PB1 (OCR1A) y PB2 (OCR1B)
	DDRB |= (1 << PINB1) | (1 << PINB2);
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 1cc:	82 ea       	ldi	r24, 0xA2	; 162
 1ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
 1d2:	82 e1       	ldi	r24, 0x12	; 18
 1d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 20000;
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1e4:	08 95       	ret

000001e6 <dutyCycle_PB1>:
}

void dutyCycle_PB1(uint16_t dutyCycle){
	OCR1A = dutyCycle;
 1e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ee:	08 95       	ret

000001f0 <dutyCycle_PB2>:
}

void dutyCycle_PB2(uint16_t dutyCycle){
	OCR1B = dutyCycle;	
 1f0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1f4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1f8:	08 95       	ret

000001fa <__udivmodsi4>:
 1fa:	a1 e2       	ldi	r26, 0x21	; 33
 1fc:	1a 2e       	mov	r1, r26
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	fd 01       	movw	r30, r26
 204:	0d c0       	rjmp	.+26     	; 0x220 <__udivmodsi4_ep>

00000206 <__udivmodsi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	ee 1f       	adc	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	a2 17       	cp	r26, r18
 210:	b3 07       	cpc	r27, r19
 212:	e4 07       	cpc	r30, r20
 214:	f5 07       	cpc	r31, r21
 216:	20 f0       	brcs	.+8      	; 0x220 <__udivmodsi4_ep>
 218:	a2 1b       	sub	r26, r18
 21a:	b3 0b       	sbc	r27, r19
 21c:	e4 0b       	sbc	r30, r20
 21e:	f5 0b       	sbc	r31, r21

00000220 <__udivmodsi4_ep>:
 220:	66 1f       	adc	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	1a 94       	dec	r1
 22a:	69 f7       	brne	.-38     	; 0x206 <__udivmodsi4_loop>
 22c:	60 95       	com	r22
 22e:	70 95       	com	r23
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	bd 01       	movw	r22, r26
 23a:	cf 01       	movw	r24, r30
 23c:	08 95       	ret

0000023e <__umulhisi3>:
 23e:	a2 9f       	mul	r26, r18
 240:	b0 01       	movw	r22, r0
 242:	b3 9f       	mul	r27, r19
 244:	c0 01       	movw	r24, r0
 246:	a3 9f       	mul	r26, r19
 248:	70 0d       	add	r23, r0
 24a:	81 1d       	adc	r24, r1
 24c:	11 24       	eor	r1, r1
 24e:	91 1d       	adc	r25, r1
 250:	b2 9f       	mul	r27, r18
 252:	70 0d       	add	r23, r0
 254:	81 1d       	adc	r24, r1
 256:	11 24       	eor	r1, r1
 258:	91 1d       	adc	r25, r1
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
