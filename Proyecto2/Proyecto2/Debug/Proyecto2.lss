
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080010e  0080010e  00000826  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f05  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cb  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00002c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000447  00000000  00000000  00003469  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 01 	call	0x3da	; 0x3da <main>
  9e:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeEEPROM>:
#include "EEPROM.h"

void writeEEPROM(uint8_t dato, uint16_t direccion)
{
	// Espera que termine la escritura anterior
	while (EECR & (1 << EEPE));		
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <writeEEPROM>
	// Asignar direccion de escritura
	EEAR = direccion;
  aa:	72 bd       	out	0x22, r23	; 34
  ac:	61 bd       	out	0x21, r22	; 33
	// Asignar dato a escribir
	EEDR = dato;
  ae:	80 bd       	out	0x20, r24	; 32
	// Setear en 1 el "master write enable"
	EECR |= (1 << EEMPE);
  b0:	8f b3       	in	r24, 0x1f	; 31
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8f bb       	out	0x1f, r24	; 31
	// Empezar a escribir
	EECR |= (1 << EEPE);
  b6:	8f b3       	in	r24, 0x1f	; 31
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	8f bb       	out	0x1f, r24	; 31
  bc:	08 95       	ret

000000be <readEEPROM>:
}

uint8_t readEEPROM(uint16_t direccion)
{
	// Espera que termine la escritura anterior
	while (EECR & (1 << EEPE));
  be:	f9 99       	sbic	0x1f, 1	; 31
  c0:	fe cf       	rjmp	.-4      	; 0xbe <readEEPROM>
	// Asignar direccion de escritura
	EEAR = direccion;
  c2:	92 bd       	out	0x22, r25	; 34
  c4:	81 bd       	out	0x21, r24	; 33
	// Empezar a leer
	EECR |= (1 << EERE);
  c6:	8f b3       	in	r24, 0x1f	; 31
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	08 95       	ret

000000d0 <ADC_init>:
	
	sei();
}

void ADC_init(void){
	ADMUX = 0;
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (canal_ADC & 0x1F); // AVcc como referencia
  d6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <canal_ADC>
  da:	90 81       	ld	r25, Z
  dc:	8f 71       	andi	r24, 0x1F	; 31
  de:	80 66       	ori	r24, 0x60	; 96
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
	ADCSRA = 0;
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
  ea:	80 81       	ld	r24, Z
  ec:	8f 68       	ori	r24, 0x8F	; 143
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  f8:	f8 94       	cli
	ADC_init();
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_init>
	PWM0_init();
  fe:	0e 94 bd 02 	call	0x57a	; 0x57a <PWM0_init>
	PWM1_init();
 102:	0e 94 4e 03 	call	0x69c	; 0x69c <PWM1_init>
	UART_init();
 106:	0e 94 68 03 	call	0x6d0	; 0x6d0 <UART_init>
	
	// Entradas y salidas	
	DDRD = (1 << PIND4) | (1 << PIND3) | (1 << PIND2);
 10a:	8c e1       	ldi	r24, 0x1C	; 28
 10c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1 << PORTD6) | (1 << PORTD5));
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	8f 79       	andi	r24, 0x9F	; 159
 112:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD6) | (1 << PORTD5);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	80 66       	ori	r24, 0x60	; 96
 118:	8b b9       	out	0x0b, r24	; 11
	
	// Habilitar interrupciones del Puerto D
	PCMSK2 |= (1 << PCINT22) | (1 << PCINT21);  // PD5–PD7
 11a:	ed e6       	ldi	r30, 0x6D	; 109
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 66       	ori	r24, 0x60	; 96
 122:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
 124:	e8 e6       	ldi	r30, 0x68	; 104
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	80 83       	st	Z, r24
	
	sei();
 12e:	78 94       	sei
 130:	08 95       	ret

00000132 <modo_MANUAL>:
	ADCSRA = 0;
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
}

void modo_MANUAL(void){
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
	dutyCycle_PB1(500 + (servo1 * 2000UL / 255));
 13a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <servo1>
 13e:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <servo1+0x1>
 142:	a0 ed       	ldi	r26, 0xD0	; 208
 144:	b7 e0       	ldi	r27, 0x07	; 7
 146:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 14a:	c1 2c       	mov	r12, r1
 14c:	d1 2c       	mov	r13, r1
 14e:	76 01       	movw	r14, r12
 150:	ca 94       	dec	r12
 152:	a7 01       	movw	r20, r14
 154:	96 01       	movw	r18, r12
 156:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 15a:	c9 01       	movw	r24, r18
 15c:	8c 50       	subi	r24, 0x0C	; 12
 15e:	9e 4f       	sbci	r25, 0xFE	; 254
 160:	0e 94 5e 03 	call	0x6bc	; 0x6bc <dutyCycle_PB1>
	dutyCycle_PB2(500 + (servo2 * 2000UL / 255));
 164:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <servo2>
 168:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <servo2+0x1>
 16c:	a0 ed       	ldi	r26, 0xD0	; 208
 16e:	b7 e0       	ldi	r27, 0x07	; 7
 170:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 174:	a7 01       	movw	r20, r14
 176:	96 01       	movw	r18, r12
 178:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 17c:	c9 01       	movw	r24, r18
 17e:	8c 50       	subi	r24, 0x0C	; 12
 180:	9e 4f       	sbci	r25, 0xFE	; 254
 182:	0e 94 63 03 	call	0x6c6	; 0x6c6 <dutyCycle_PB2>
	dutyCycle_PB3(500 + (servo3 * 2000UL / 255));
 186:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <servo3>
 18a:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <servo3+0x1>
 18e:	a0 ed       	ldi	r26, 0xD0	; 208
 190:	b7 e0       	ldi	r27, 0x07	; 7
 192:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 196:	a7 01       	movw	r20, r14
 198:	96 01       	movw	r18, r12
 19a:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 19e:	c9 01       	movw	r24, r18
 1a0:	8c 50       	subi	r24, 0x0C	; 12
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	0e 94 c8 02 	call	0x590	; 0x590 <dutyCycle_PB3>
	dutyCycle_PB4(500 + (servo4 * 2000UL / 255));
 1a8:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <servo4>
 1ac:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <servo4+0x1>
 1b0:	a0 ed       	ldi	r26, 0xD0	; 208
 1b2:	b7 e0       	ldi	r27, 0x07	; 7
 1b4:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 1b8:	a7 01       	movw	r20, r14
 1ba:	96 01       	movw	r18, r12
 1bc:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 1c0:	c9 01       	movw	r24, r18
 1c2:	8c 50       	subi	r24, 0x0C	; 12
 1c4:	9e 4f       	sbci	r25, 0xFE	; 254
 1c6:	0e 94 cd 02 	call	0x59a	; 0x59a <dutyCycle_PB4>
}
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	08 95       	ret

000001d4 <set_estado>:

void set_estado(void){
	switch (estado_actual){
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	69 f0       	breq	.+26     	; 0x1f6 <set_estado+0x22>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	a1 f0       	breq	.+40     	; 0x208 <set_estado+0x34>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	e1 f4       	brne	.+56     	; 0x21c <set_estado+0x48>
		case 1: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD2); 
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	83 7e       	andi	r24, 0xE3	; 227
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	8b b9       	out	0x0b, r24	; 11
			send_STRING("M\n");
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <send_STRING>
			break;
 1f4:	08 95       	ret
		case 2: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD3); 
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	83 7e       	andi	r24, 0xE3	; 227
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8b b9       	out	0x0b, r24	; 11
			send_STRING("E\n");
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <send_STRING>
			break;
 206:	08 95       	ret
		case 3: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD4); 
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	83 7e       	andi	r24, 0xE3	; 227
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	8b b9       	out	0x0b, r24	; 11
			estado_actual = 0;
 210:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			send_STRING("S\n");
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <send_STRING>
 21c:	08 95       	ret

0000021e <set_estadoUART>:
			break;
	}
}

void set_estadoUART(unsigned char estado){
	switch(estado){
 21e:	8d 34       	cpi	r24, 0x4D	; 77
 220:	29 f0       	breq	.+10     	; 0x22c <set_estadoUART+0xe>
 222:	83 35       	cpi	r24, 0x53	; 83
 224:	99 f0       	breq	.+38     	; 0x24c <set_estadoUART+0x2e>
 226:	85 34       	cpi	r24, 0x45	; 69
 228:	b9 f4       	brne	.+46     	; 0x258 <set_estadoUART+0x3a>
 22a:	08 c0       	rjmp	.+16     	; 0x23c <set_estadoUART+0x1e>
		case 'M': 
		PORTD = (PORTD & 0xE3) | (1 << PORTD2); 
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	83 7e       	andi	r24, 0xE3	; 227
 230:	84 60       	ori	r24, 0x04	; 4
 232:	8b b9       	out	0x0b, r24	; 11
		estado_actual = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 23a:	08 95       	ret
		case 'E': 
		PORTD = (PORTD & 0xE3) | (1 << PORTD3); 
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	83 7e       	andi	r24, 0xE3	; 227
 240:	88 60       	ori	r24, 0x08	; 8
 242:	8b b9       	out	0x0b, r24	; 11
		estado_actual = 2;
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 24a:	08 95       	ret
		case 'S': 
		PORTD = (PORTD & 0xE3) | (1 << PORTD4);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	83 7e       	andi	r24, 0xE3	; 227
 250:	80 61       	ori	r24, 0x10	; 16
 252:	8b b9       	out	0x0b, r24	; 11
		estado_actual = 0;
 254:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	08 95       	ret

0000025a <leer_EEPROOM>:
		break;
	}
}

void leer_EEPROOM(unsigned char posicion) {
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	switch (posicion){
 25e:	82 34       	cpi	r24, 0x42	; 66
 260:	61 f0       	breq	.+24     	; 0x27a <leer_EEPROOM+0x20>
 262:	18 f4       	brcc	.+6      	; 0x26a <leer_EEPROOM+0x10>
 264:	81 34       	cpi	r24, 0x41	; 65
 266:	31 f0       	breq	.+12     	; 0x274 <leer_EEPROOM+0x1a>
 268:	13 c0       	rjmp	.+38     	; 0x290 <leer_EEPROOM+0x36>
 26a:	83 34       	cpi	r24, 0x43	; 67
 26c:	51 f0       	breq	.+20     	; 0x282 <leer_EEPROOM+0x28>
 26e:	84 34       	cpi	r24, 0x44	; 68
 270:	61 f0       	breq	.+24     	; 0x28a <leer_EEPROOM+0x30>
 272:	0e c0       	rjmp	.+28     	; 0x290 <leer_EEPROOM+0x36>
		case 'A': pos_read = 0; break;
 274:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <pos_read>
 278:	0b c0       	rjmp	.+22     	; 0x290 <leer_EEPROOM+0x36>
		case 'B': pos_read = 1; break;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pos_read>
 280:	07 c0       	rjmp	.+14     	; 0x290 <leer_EEPROOM+0x36>
		case 'C': pos_read = 2; break;
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pos_read>
 288:	03 c0       	rjmp	.+6      	; 0x290 <leer_EEPROOM+0x36>
		case 'D': pos_read = 3; break;
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pos_read>
	}
	uint8_t direccion = direcciones_EEPROM[pos_read];
 290:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <pos_read>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e6 5f       	subi	r30, 0xF6	; 246
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	d0 81       	ld	r29, Z
	for (uint8_t i = 0; i < 4; i++)
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	55 c0       	rjmp	.+170    	; 0x34a <leer_EEPROOM+0xf0>
	{
		uint8_t dato_leido = readEEPROM(direccion);
 2a0:	8d 2f       	mov	r24, r29
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 5f 00 	call	0xbe	; 0xbe <readEEPROM>
		switch (i){
 2a8:	c1 30       	cpi	r28, 0x01	; 1
 2aa:	c1 f0       	breq	.+48     	; 0x2dc <leer_EEPROOM+0x82>
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <leer_EEPROOM+0x5e>
 2ae:	c2 30       	cpi	r28, 0x02	; 2
 2b0:	39 f1       	breq	.+78     	; 0x300 <leer_EEPROOM+0xa6>
 2b2:	c3 30       	cpi	r28, 0x03	; 3
 2b4:	b9 f1       	breq	.+110    	; 0x324 <leer_EEPROOM+0xca>
 2b6:	47 c0       	rjmp	.+142    	; 0x346 <leer_EEPROOM+0xec>
		case 0: dutyCycle_PB1(500 + (dato_leido * 2000UL / 255)); break;
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	a0 ed       	ldi	r26, 0xD0	; 208
 2be:	b7 e0       	ldi	r27, 0x07	; 7
 2c0:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 2d0:	c9 01       	movw	r24, r18
 2d2:	8c 50       	subi	r24, 0x0C	; 12
 2d4:	9e 4f       	sbci	r25, 0xFE	; 254
 2d6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <dutyCycle_PB1>
 2da:	35 c0       	rjmp	.+106    	; 0x346 <leer_EEPROOM+0xec>
		case 1: dutyCycle_PB2(500 + (dato_leido * 2000UL / 255)); break;
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	a0 ed       	ldi	r26, 0xD0	; 208
 2e2:	b7 e0       	ldi	r27, 0x07	; 7
 2e4:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 2f4:	c9 01       	movw	r24, r18
 2f6:	8c 50       	subi	r24, 0x0C	; 12
 2f8:	9e 4f       	sbci	r25, 0xFE	; 254
 2fa:	0e 94 63 03 	call	0x6c6	; 0x6c6 <dutyCycle_PB2>
 2fe:	23 c0       	rjmp	.+70     	; 0x346 <leer_EEPROOM+0xec>
		case 2: dutyCycle_PB3(500 + (dato_leido * 2000UL / 255)); break;
 300:	28 2f       	mov	r18, r24
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	a0 ed       	ldi	r26, 0xD0	; 208
 306:	b7 e0       	ldi	r27, 0x07	; 7
 308:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 318:	c9 01       	movw	r24, r18
 31a:	8c 50       	subi	r24, 0x0C	; 12
 31c:	9e 4f       	sbci	r25, 0xFE	; 254
 31e:	0e 94 c8 02 	call	0x590	; 0x590 <dutyCycle_PB3>
 322:	11 c0       	rjmp	.+34     	; 0x346 <leer_EEPROOM+0xec>
		case 3: dutyCycle_PB4(500 + (dato_leido * 2000UL / 255)); break;
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	a0 ed       	ldi	r26, 0xD0	; 208
 32a:	b7 e0       	ldi	r27, 0x07	; 7
 32c:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	0e 94 8f 03 	call	0x71e	; 0x71e <__udivmodsi4>
 33c:	c9 01       	movw	r24, r18
 33e:	8c 50       	subi	r24, 0x0C	; 12
 340:	9e 4f       	sbci	r25, 0xFE	; 254
 342:	0e 94 cd 02 	call	0x59a	; 0x59a <dutyCycle_PB4>
		}
		direccion++;
 346:	df 5f       	subi	r29, 0xFF	; 255
		case 'B': pos_read = 1; break;
		case 'C': pos_read = 2; break;
		case 'D': pos_read = 3; break;
	}
	uint8_t direccion = direcciones_EEPROM[pos_read];
	for (uint8_t i = 0; i < 4; i++)
 348:	cf 5f       	subi	r28, 0xFF	; 255
 34a:	c4 30       	cpi	r28, 0x04	; 4
 34c:	08 f4       	brcc	.+2      	; 0x350 <leer_EEPROOM+0xf6>
 34e:	a8 cf       	rjmp	.-176    	; 0x2a0 <leer_EEPROOM+0x46>
		case 3: dutyCycle_PB4(500 + (dato_leido * 2000UL / 255)); break;
		}
		direccion++;
	}
	
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <escribir_EEPROM>:
void escribir_EEPROM(void) {
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	uint8_t direccion = direcciones_EEPROM[pos_write];
 35a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <pos_write>
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	e6 5f       	subi	r30, 0xF6	; 246
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	d0 81       	ld	r29, Z
	for (uint8_t i = 0; i < 4; i++)
 366:	c0 e0       	ldi	r28, 0x00	; 0
 368:	2d c0       	rjmp	.+90     	; 0x3c4 <escribir_EEPROM+0x6e>
	{
		switch (i){
 36a:	c1 30       	cpi	r28, 0x01	; 1
 36c:	79 f0       	breq	.+30     	; 0x38c <escribir_EEPROM+0x36>
 36e:	28 f0       	brcs	.+10     	; 0x37a <escribir_EEPROM+0x24>
 370:	c2 30       	cpi	r28, 0x02	; 2
 372:	a9 f0       	breq	.+42     	; 0x39e <escribir_EEPROM+0x48>
 374:	c3 30       	cpi	r28, 0x03	; 3
 376:	e1 f0       	breq	.+56     	; 0x3b0 <escribir_EEPROM+0x5a>
 378:	23 c0       	rjmp	.+70     	; 0x3c0 <escribir_EEPROM+0x6a>
			case 0: writeEEPROM(servo1,direccion); break;
 37a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <servo1>
 37e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <servo1+0x1>
 382:	6d 2f       	mov	r22, r29
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
 38a:	1a c0       	rjmp	.+52     	; 0x3c0 <escribir_EEPROM+0x6a>
			case 1: writeEEPROM(servo2,direccion); break;
 38c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <servo2>
 390:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <servo2+0x1>
 394:	6d 2f       	mov	r22, r29
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
 39c:	11 c0       	rjmp	.+34     	; 0x3c0 <escribir_EEPROM+0x6a>
			case 2: writeEEPROM(servo3,direccion); break;
 39e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <servo3>
 3a2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <servo3+0x1>
 3a6:	6d 2f       	mov	r22, r29
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <escribir_EEPROM+0x6a>
			case 3: writeEEPROM(servo4,direccion); break;
 3b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <servo4>
 3b4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <servo4+0x1>
 3b8:	6d 2f       	mov	r22, r29
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	0e 94 53 00 	call	0xa6	; 0xa6 <writeEEPROM>
		}
		direccion++;
 3c0:	df 5f       	subi	r29, 0xFF	; 255
	}
	
}
void escribir_EEPROM(void) {
	uint8_t direccion = direcciones_EEPROM[pos_write];
	for (uint8_t i = 0; i < 4; i++)
 3c2:	cf 5f       	subi	r28, 0xFF	; 255
 3c4:	c4 30       	cpi	r28, 0x04	; 4
 3c6:	88 f2       	brcs	.-94     	; 0x36a <escribir_EEPROM+0x14>
			case 2: writeEEPROM(servo3,direccion); break;
			case 3: writeEEPROM(servo4,direccion); break;
		}
		direccion++;
	}
	pos_write = (pos_write + 1) & 0x03;
 3c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pos_write>
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	83 70       	andi	r24, 0x03	; 3
 3d0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pos_write>
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <main>:
/****************************************/
// Función principal
int main(void)
{
    /* Replace with your application code */
	setup();
 3da:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>
	set_estado();
 3de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_estado>
    while (1) 
    {
		if (dato_ENVIADO)
 3e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 3e6:	88 23       	and	r24, r24
 3e8:	41 f1       	breq	.+80     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			if ((received_RX == 'M') || (received_RX == 'E') || (received_RX == 'S'))
 3ea:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 3ee:	8d 34       	cpi	r24, 0x4D	; 77
 3f0:	41 f0       	breq	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 3f6:	85 34       	cpi	r24, 0x45	; 69
 3f8:	21 f0       	breq	.+8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 3fe:	83 35       	cpi	r24, 0x53	; 83
 400:	21 f4       	brne	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			{
				set_estadoUART(received_RX);
 402:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 406:	0e 94 0f 01 	call	0x21e	; 0x21e <set_estadoUART>
			}
			if (((received_RX == 'A') || (received_RX == 'B') || (received_RX == 'C') || (received_RX == 'D')) && (estado_actual == 2))
 40a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 40e:	81 34       	cpi	r24, 0x41	; 65
 410:	61 f0       	breq	.+24     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 412:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 416:	82 34       	cpi	r24, 0x42	; 66
 418:	41 f0       	breq	.+16     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 41a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 41e:	83 34       	cpi	r24, 0x43	; 67
 420:	21 f0       	breq	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 422:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 426:	84 34       	cpi	r24, 0x44	; 68
 428:	41 f4       	brne	.+16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 42a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	21 f4       	brne	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
				leer_EEPROOM(received_RX);
 432:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <received_RX>
 436:	0e 94 2d 01 	call	0x25a	; 0x25a <leer_EEPROOM>
			}
		}
		if (accion_activa == 1)
 43a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <accion_activa>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	49 f4       	brne	.+18     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		{
			accion_activa = 0;
 442:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <accion_activa>
			estado_actual++;
 446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			set_estado();
 450:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <set_estado>
		}
		
		if (estado_actual == 1)
 454:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	19 f6       	brne	.-122    	; 0x3e2 <main+0x8>
		{
			modo_MANUAL();
 45c:	0e 94 99 00 	call	0x132	; 0x132 <modo_MANUAL>
			if (accion_activa == 2)
 460:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <accion_activa>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	09 f0       	breq	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 468:	bc cf       	rjmp	.-136    	; 0x3e2 <main+0x8>
			{
				accion_activa = 0;
 46a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <accion_activa>
				escribir_EEPROM();
 46e:	0e 94 ab 01 	call	0x356	; 0x356 <escribir_EEPROM>
 472:	b7 cf       	rjmp	.-146    	; 0x3e2 <main+0x8>

00000474 <__vector_21>:
	}
	pos_write = (pos_write + 1) & 0x03;
}
/****************************************/
// Subrutinas de Interrupcion
ISR(ADC_vect){
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	switch (canal_ADC){
 486:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <canal_ADC>
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	71 f0       	breq	.+28     	; 0x4aa <__vector_21+0x36>
 48e:	28 f0       	brcs	.+10     	; 0x49a <__vector_21+0x26>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	99 f0       	breq	.+38     	; 0x4ba <__vector_21+0x46>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	c9 f0       	breq	.+50     	; 0x4ca <__vector_21+0x56>
 498:	1f c0       	rjmp	.+62     	; 0x4d8 <__vector_21+0x64>
		case 0: servo1 = ADCH; break;
 49a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <servo1+0x1>
 4a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <servo1>
 4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <__vector_21+0x64>
		case 1: servo2 = ADCH; break;
 4aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <servo2+0x1>
 4b4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <servo2>
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <__vector_21+0x64>
		case 2: servo3 = ADCH; break;
 4ba:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <servo3+0x1>
 4c4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <servo3>
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__vector_21+0x64>
		case 3: servo4 = ADCH; break;
 4ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <servo4+0x1>
 4d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <servo4>
	}
	canal_ADC = (canal_ADC + 1) % 4;
 4d8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <canal_ADC>
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	83 70       	andi	r24, 0x03	; 3
 4e2:	90 78       	andi	r25, 0x80	; 128
 4e4:	99 23       	and	r25, r25
 4e6:	24 f4       	brge	.+8      	; 0x4f0 <__vector_21+0x7c>
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	8c 6f       	ori	r24, 0xFC	; 252
 4ec:	9f 6f       	ori	r25, 0xFF	; 255
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <canal_ADC>
	ADMUX = (ADMUX & 0xF0) | (canal_ADC & 0x1F);
 4f4:	ec e7       	ldi	r30, 0x7C	; 124
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	90 81       	ld	r25, Z
 4fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <canal_ADC>
 4fe:	90 7f       	andi	r25, 0xF0	; 240
 500:	8f 71       	andi	r24, 0x1F	; 31
 502:	89 2b       	or	r24, r25
 504:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 506:	ea e7       	ldi	r30, 0x7A	; 122
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	80 83       	st	Z, r24
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_5>:

ISR(PCINT2_vect){
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	8f 93       	push	r24
	accion_activa = 0;
 52e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <accion_activa>
	if (!(PIND & (1 << PIND5))) // Cambiar ESTADO
 532:	4d 99       	sbic	0x09, 5	; 9
 534:	04 c0       	rjmp	.+8      	; 0x53e <__vector_5+0x1c>
	{
		accion_activa = 1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <accion_activa>
 53c:	05 c0       	rjmp	.+10     	; 0x548 <__vector_5+0x26>
	}
	else if (!(PIND & (1 << PIND6))) // Guardar EEPROM
 53e:	4e 99       	sbic	0x09, 6	; 9
 540:	03 c0       	rjmp	.+6      	; 0x548 <__vector_5+0x26>
	{
		accion_activa = 2;
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <accion_activa>
	}
}
 548:	8f 91       	pop	r24
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__vector_18>:

ISR(USART_RX_vect){
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	8f 93       	push	r24
	received_RX = UDR0;
 560:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 564:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <received_RX>
	dato_ENVIADO = 1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 56e:	8f 91       	pop	r24
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <PWM0_init>:
void dutyCycle_PB4(uint16_t dutyCycle) {
	pulse_SERVO2 = dutyCycle;
}

void dutyCycle_PB5(uint16_t dutyCycle) {
	pulse_SERVO3 = dutyCycle;
 57a:	84 b1       	in	r24, 0x04	; 4
 57c:	88 63       	ori	r24, 0x38	; 56
 57e:	84 b9       	out	0x04, r24	; 4
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	84 bd       	out	0x24, r24	; 36
 584:	85 bd       	out	0x25, r24	; 37
 586:	94 e6       	ldi	r25, 0x64	; 100
 588:	97 bd       	out	0x27, r25	; 39
 58a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 58e:	08 95       	ret

00000590 <dutyCycle_PB3>:
 590:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <pulse_SERVO1+0x1>
 594:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pulse_SERVO1>
 598:	08 95       	ret

0000059a <dutyCycle_PB4>:
 59a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <pulse_SERVO2+0x1>
 59e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pulse_SERVO2>
 5a2:	08 95       	ret

000005a4 <__vector_14>:
}

/****************************************/
// Subrutinas de Interrupcion
ISR(TIMER0_COMPA_vect) {
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
	contador_pulso++;
 5be:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador_pulso>
 5c2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <contador_pulso+0x1>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <contador_pulso+0x1>
 5cc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <contador_pulso>
	if (contador_pulso >= 400) contador_pulso = 0;
 5d0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador_pulso>
 5d4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <contador_pulso+0x1>
 5d8:	80 39       	cpi	r24, 0x90	; 144
 5da:	91 40       	sbci	r25, 0x01	; 1
 5dc:	20 f0       	brcs	.+8      	; 0x5e6 <__vector_14+0x42>
 5de:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <contador_pulso+0x1>
 5e2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <contador_pulso>
	if (contador_pulso == 0)
 5e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <contador_pulso>
 5ea:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <contador_pulso+0x1>
 5ee:	89 2b       	or	r24, r25
 5f0:	21 f4       	brne	.+8      	; 0x5fa <__vector_14+0x56>
	{
		PORTB |= (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5);
 5f2:	85 b1       	in	r24, 0x05	; 5
 5f4:	88 63       	ori	r24, 0x38	; 56
 5f6:	85 b9       	out	0x05, r24	; 5
 5f8:	44 c0       	rjmp	.+136    	; 0x682 <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO1 / 50))
 5fa:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <pulse_SERVO1>
 5fe:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <pulse_SERVO1+0x1>
 602:	36 95       	lsr	r19
 604:	27 95       	ror	r18
 606:	ab e7       	ldi	r26, 0x7B	; 123
 608:	b4 e1       	ldi	r27, 0x14	; 20
 60a:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <contador_pulso>
 616:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <contador_pulso+0x1>
 61a:	82 17       	cp	r24, r18
 61c:	93 07       	cpc	r25, r19
 61e:	21 f4       	brne	.+8      	; 0x628 <__vector_14+0x84>
	{
		PORTB &= ~(1 << PORTB3);
 620:	85 b1       	in	r24, 0x05	; 5
 622:	87 7f       	andi	r24, 0xF7	; 247
 624:	85 b9       	out	0x05, r24	; 5
 626:	2d c0       	rjmp	.+90     	; 0x682 <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO2 / 50))
 628:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <pulse_SERVO2>
 62c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <pulse_SERVO2+0x1>
 630:	36 95       	lsr	r19
 632:	27 95       	ror	r18
 634:	ab e7       	ldi	r26, 0x7B	; 123
 636:	b4 e1       	ldi	r27, 0x14	; 20
 638:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <contador_pulso>
 644:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <contador_pulso+0x1>
 648:	82 17       	cp	r24, r18
 64a:	93 07       	cpc	r25, r19
 64c:	21 f4       	brne	.+8      	; 0x656 <__vector_14+0xb2>
	{
		PORTB &= ~(1 << PORTB4);
 64e:	85 b1       	in	r24, 0x05	; 5
 650:	8f 7e       	andi	r24, 0xEF	; 239
 652:	85 b9       	out	0x05, r24	; 5
 654:	16 c0       	rjmp	.+44     	; 0x682 <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO3 / 50))
 656:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <pulse_SERVO3>
 65a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <pulse_SERVO3+0x1>
 65e:	36 95       	lsr	r19
 660:	27 95       	ror	r18
 662:	ab e7       	ldi	r26, 0x7B	; 123
 664:	b4 e1       	ldi	r27, 0x14	; 20
 666:	0e 94 b1 03 	call	0x762	; 0x762 <__umulhisi3>
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <contador_pulso>
 672:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <contador_pulso+0x1>
 676:	82 17       	cp	r24, r18
 678:	93 07       	cpc	r25, r19
 67a:	19 f4       	brne	.+6      	; 0x682 <__vector_14+0xde>
	{
		PORTB &= ~(1 << PORTB5);
 67c:	85 b1       	in	r24, 0x05	; 5
 67e:	8f 7d       	andi	r24, 0xDF	; 223
 680:	85 b9       	out	0x05, r24	; 5
	}
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <PWM1_init>:

#include "PWM1.h"

void PWM1_init(void) {
	// PB1 (OCR1A) y PB2 (OCR1B)
	DDRB |= (1 << PINB1) | (1 << PINB2);
 69c:	84 b1       	in	r24, 0x04	; 4
 69e:	86 60       	ori	r24, 0x06	; 6
 6a0:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 6a2:	82 ea       	ldi	r24, 0xA2	; 162
 6a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
 6a8:	82 e1       	ldi	r24, 0x12	; 18
 6aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 20000;
 6ae:	80 e2       	ldi	r24, 0x20	; 32
 6b0:	9e e4       	ldi	r25, 0x4E	; 78
 6b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 6b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 6ba:	08 95       	ret

000006bc <dutyCycle_PB1>:
}

void dutyCycle_PB1(uint16_t dutyCycle){
	OCR1A = dutyCycle;
 6bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 6c4:	08 95       	ret

000006c6 <dutyCycle_PB2>:
}

void dutyCycle_PB2(uint16_t dutyCycle){
	OCR1B = dutyCycle;	
 6c6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 6ce:	08 95       	ret

000006d0 <UART_init>:
 */ 

#include "UART.h"

void UART_init(void){
	UBRR0 = 103;
 6d0:	87 e6       	ldi	r24, 0x67	; 103
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); //Rx int. | Rxen | Txen
 6dc:	88 e9       	ldi	r24, 0x98	; 152
 6de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //Async. | No parity | 1 stop | 8 data
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6e8:	08 95       	ret

000006ea <send_CHAR>:
}

void send_CHAR(unsigned char caracter){
	while (!(UCSR0A & (1 << UDRE0))); //Revisar si UDR está vacío
 6ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6ee:	95 ff       	sbrs	r25, 5
 6f0:	fc cf       	rjmp	.-8      	; 0x6ea <send_CHAR>
	UDR0 = caracter;
 6f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6f6:	08 95       	ret

000006f8 <send_STRING>:
}

void send_STRING(char* texto){
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 700:	c0 e0       	ldi	r28, 0x00	; 0
	while (texto[i] != '\0'){
 702:	03 c0       	rjmp	.+6      	; 0x70a <send_STRING+0x12>
		send_CHAR(texto[i]);
 704:	0e 94 75 03 	call	0x6ea	; 0x6ea <send_CHAR>
		i++;
 708:	cf 5f       	subi	r28, 0xFF	; 255
	UDR0 = caracter;
}

void send_STRING(char* texto){
	uint8_t i = 0;
	while (texto[i] != '\0'){
 70a:	f8 01       	movw	r30, r16
 70c:	ec 0f       	add	r30, r28
 70e:	f1 1d       	adc	r31, r1
 710:	80 81       	ld	r24, Z
 712:	81 11       	cpse	r24, r1
 714:	f7 cf       	rjmp	.-18     	; 0x704 <send_STRING+0xc>
		send_CHAR(texto[i]);
		i++;
	}
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	08 95       	ret

0000071e <__udivmodsi4>:
 71e:	a1 e2       	ldi	r26, 0x21	; 33
 720:	1a 2e       	mov	r1, r26
 722:	aa 1b       	sub	r26, r26
 724:	bb 1b       	sub	r27, r27
 726:	fd 01       	movw	r30, r26
 728:	0d c0       	rjmp	.+26     	; 0x744 <__udivmodsi4_ep>

0000072a <__udivmodsi4_loop>:
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	ee 1f       	adc	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	a2 17       	cp	r26, r18
 734:	b3 07       	cpc	r27, r19
 736:	e4 07       	cpc	r30, r20
 738:	f5 07       	cpc	r31, r21
 73a:	20 f0       	brcs	.+8      	; 0x744 <__udivmodsi4_ep>
 73c:	a2 1b       	sub	r26, r18
 73e:	b3 0b       	sbc	r27, r19
 740:	e4 0b       	sbc	r30, r20
 742:	f5 0b       	sbc	r31, r21

00000744 <__udivmodsi4_ep>:
 744:	66 1f       	adc	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a 94       	dec	r1
 74e:	69 f7       	brne	.-38     	; 0x72a <__udivmodsi4_loop>
 750:	60 95       	com	r22
 752:	70 95       	com	r23
 754:	80 95       	com	r24
 756:	90 95       	com	r25
 758:	9b 01       	movw	r18, r22
 75a:	ac 01       	movw	r20, r24
 75c:	bd 01       	movw	r22, r26
 75e:	cf 01       	movw	r24, r30
 760:	08 95       	ret

00000762 <__umulhisi3>:
 762:	a2 9f       	mul	r26, r18
 764:	b0 01       	movw	r22, r0
 766:	b3 9f       	mul	r27, r19
 768:	c0 01       	movw	r24, r0
 76a:	a3 9f       	mul	r26, r19
 76c:	70 0d       	add	r23, r0
 76e:	81 1d       	adc	r24, r1
 770:	11 24       	eor	r1, r1
 772:	91 1d       	adc	r25, r1
 774:	b2 9f       	mul	r27, r18
 776:	70 0d       	add	r23, r0
 778:	81 1d       	adc	r24, r1
 77a:	11 24       	eor	r1, r1
 77c:	91 1d       	adc	r25, r1
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
