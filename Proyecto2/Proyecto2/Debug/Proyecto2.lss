
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac1  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c5  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ef  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000278b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  9e:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
	
	sei();
}

void ADC_init(void){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (canal_ADC & 0x1F); // AVcc como referencia
  ac:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <canal_ADC>
  b0:	90 81       	ld	r25, Z
  b2:	8f 71       	andi	r24, 0x1F	; 31
  b4:	80 66       	ori	r24, 0x60	; 96
  b6:	89 2b       	or	r24, r25
  b8:	80 83       	st	Z, r24
	ADCSRA = 0;
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
  c0:	80 81       	ld	r24, Z
  c2:	8f 68       	ori	r24, 0x8F	; 143
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <setup>:
}

/****************************************/
// Subrutinas sin Interrupcion
void setup(void){
	cli();
  ce:	f8 94       	cli
	ADC_init();
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	PWM0_init();
  d4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PWM0_init>
	PWM1_init();
  d8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PWM1_init>
	
	// Entradas y salidas
	DDRB &= ~(1 << PORTB0);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0);
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	85 b9       	out	0x05, r24	; 5
	
	DDRD = (1 << PIND4) | (1 << PIND3) | (1 << PIND2);
  e8:	8c e1       	ldi	r24, 0x1C	; 28
  ea:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1 << PORTD7) | (1 << PORTD6) | (1 << PORTD5));
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	8f 71       	andi	r24, 0x1F	; 31
  f0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PORTD7) | (1 << PORTD6) | (1 << PORTD5);
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	80 6e       	ori	r24, 0xE0	; 224
  f6:	8b b9       	out	0x0b, r24	; 11
	
	// Habilitar interrupciones del Puerto D
	PCMSK0 |= (1 << PCINT0);  // PB0 (PCINT0)
  f8:	eb e6       	ldi	r30, 0x6B	; 107
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT23) | (1 << PCINT22) | (1 << PCINT21);  // PD5–PD7
 102:	ed e6       	ldi	r30, 0x6D	; 109
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 6e       	ori	r24, 0xE0	; 224
 10a:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0) | (1 << PCIE2);
 10c:	e8 e6       	ldi	r30, 0x68	; 104
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	85 60       	ori	r24, 0x05	; 5
 114:	80 83       	st	Z, r24
	
	sei();
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <mover_servos>:
	ADCSRA = 0;
	ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC con prescaler de 128 (16MHz/128 = 125kHz)
	ADCSRA |= (1<<ADSC); // Inicia primera conversión del ADC
}

void mover_servos(void){
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
	dutyCycle_PB1(500 + (servo1 * 2000UL / 255));
 122:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <servo1>
 126:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <servo1+0x1>
 12a:	a0 ed       	ldi	r26, 0xD0	; 208
 12c:	b7 e0       	ldi	r27, 0x07	; 7
 12e:	0e 94 44 02 	call	0x488	; 0x488 <__umulhisi3>
 132:	c1 2c       	mov	r12, r1
 134:	d1 2c       	mov	r13, r1
 136:	76 01       	movw	r14, r12
 138:	ca 94       	dec	r12
 13a:	a7 01       	movw	r20, r14
 13c:	96 01       	movw	r18, r12
 13e:	0e 94 22 02 	call	0x444	; 0x444 <__udivmodsi4>
 142:	c9 01       	movw	r24, r18
 144:	8c 50       	subi	r24, 0x0C	; 12
 146:	9e 4f       	sbci	r25, 0xFE	; 254
 148:	0e 94 04 02 	call	0x408	; 0x408 <dutyCycle_PB1>
	dutyCycle_PB2(500 + (servo2 * 2000UL / 255));
 14c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <servo2>
 150:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <servo2+0x1>
 154:	a0 ed       	ldi	r26, 0xD0	; 208
 156:	b7 e0       	ldi	r27, 0x07	; 7
 158:	0e 94 44 02 	call	0x488	; 0x488 <__umulhisi3>
 15c:	a7 01       	movw	r20, r14
 15e:	96 01       	movw	r18, r12
 160:	0e 94 22 02 	call	0x444	; 0x444 <__udivmodsi4>
 164:	c9 01       	movw	r24, r18
 166:	8c 50       	subi	r24, 0x0C	; 12
 168:	9e 4f       	sbci	r25, 0xFE	; 254
 16a:	0e 94 09 02 	call	0x412	; 0x412 <dutyCycle_PB2>
	dutyCycle_PB3(500 + (servo3 * 2000UL / 255));
 16e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <servo3>
 172:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <servo3+0x1>
 176:	a0 ed       	ldi	r26, 0xD0	; 208
 178:	b7 e0       	ldi	r27, 0x07	; 7
 17a:	0e 94 44 02 	call	0x488	; 0x488 <__umulhisi3>
 17e:	a7 01       	movw	r20, r14
 180:	96 01       	movw	r18, r12
 182:	0e 94 22 02 	call	0x444	; 0x444 <__udivmodsi4>
 186:	c9 01       	movw	r24, r18
 188:	8c 50       	subi	r24, 0x0C	; 12
 18a:	9e 4f       	sbci	r25, 0xFE	; 254
 18c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <dutyCycle_PB3>
}
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <set_estado>:

void set_estado(void){
	switch (estado_actual){
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	49 f0       	breq	.+18     	; 0x1b4 <set_estado+0x1a>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	61 f0       	breq	.+24     	; 0x1be <set_estado+0x24>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <set_estado+0x30>
		case 1: PORTD = (PORTD & 0xE3) | (1 << PORTD2); break;
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	83 7e       	andi	r24, 0xE3	; 227
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	08 95       	ret
		case 2: PORTD = (PORTD & 0xE3) | (1 << PORTD3); break;
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	83 7e       	andi	r24, 0xE3	; 227
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	08 95       	ret
		case 3: 
			PORTD = (PORTD & 0xE3) | (1 << PORTD4); 
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	83 7e       	andi	r24, 0xE3	; 227
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	8b b9       	out	0x0b, r24	; 11
			estado_actual = 0;
 1c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	08 95       	ret

000001cc <main>:
/****************************************/
// Función principal
int main(void)
{
    /* Replace with your application code */
	setup();
 1cc:	0e 94 67 00 	call	0xce	; 0xce <setup>
	set_estado();
 1d0:	0e 94 cd 00 	call	0x19a	; 0x19a <set_estado>
    while (1) 
    {
		if (estado_flag == 1)
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	49 f4       	brne	.+18     	; 0x1ee <main+0x22>
		{
			estado_flag = 0;
 1dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			estado_actual++;
 1e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			set_estado();
 1ea:	0e 94 cd 00 	call	0x19a	; 0x19a <set_estado>
			
		}
		mover_servos();
 1ee:	0e 94 8d 00 	call	0x11a	; 0x11a <mover_servos>
    }
 1f2:	f0 cf       	rjmp	.-32     	; 0x1d4 <main+0x8>

000001f4 <__vector_21>:
			break;
	}
}
/****************************************/
// Subrutinas de Interrupcion
ISR(ADC_vect){
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	switch (canal_ADC){
 210:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <canal_ADC>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	61 f0       	breq	.+24     	; 0x230 <__vector_21+0x3c>
 218:	18 f0       	brcs	.+6      	; 0x220 <__vector_21+0x2c>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	89 f0       	breq	.+34     	; 0x240 <__vector_21+0x4c>
 21e:	17 c0       	rjmp	.+46     	; 0x24e <__vector_21+0x5a>
		case 0: servo1 = ADCH; break;
 220:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <servo1+0x1>
 22a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <servo1>
 22e:	0f c0       	rjmp	.+30     	; 0x24e <__vector_21+0x5a>
		case 1: servo2 = ADCH; break;
 230:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <servo2+0x1>
 23a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <servo2>
 23e:	07 c0       	rjmp	.+14     	; 0x24e <__vector_21+0x5a>
		case 2: servo3 = ADCH; break;
 240:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <servo3+0x1>
 24a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <servo3>
	}
	canal_ADC = (canal_ADC + 1) % 3;
 24e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <canal_ADC>
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	0e 94 0e 02 	call	0x41c	; 0x41c <__divmodhi4>
 25e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <canal_ADC>
	ADMUX = (ADMUX & 0xF0) | (canal_ADC & 0x1F);
 262:	ec e7       	ldi	r30, 0x7C	; 124
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <canal_ADC>
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	8f 71       	andi	r24, 0x1F	; 31
 270:	89 2b       	or	r24, r25
 272:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_3>:

ISR(PCINT0_vect){
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
	
}
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_5>:

ISR(PCINT2_vect){
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
	if (!(PIND & (1 << PIND5)))
 2ba:	4d 99       	sbic	0x09, 5	; 9
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <__vector_5+0x16>
	{
		estado_flag = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <PWM0_init>:
void dutyCycle_PB4(uint16_t dutyCycle) {
	pulse_SERVO2 = dutyCycle;
}

void dutyCycle_PB5(uint16_t dutyCycle) {
	pulse_SERVO3 = dutyCycle;
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	88 63       	ori	r24, 0x38	; 56
 2d4:	84 b9       	out	0x04, r24	; 4
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	84 bd       	out	0x24, r24	; 36
 2da:	85 bd       	out	0x25, r24	; 37
 2dc:	94 e6       	ldi	r25, 0x64	; 100
 2de:	97 bd       	out	0x27, r25	; 39
 2e0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2e4:	08 95       	ret

000002e6 <dutyCycle_PB3>:
 2e6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <pulse_SERVO1+0x1>
 2ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pulse_SERVO1>
 2ee:	08 95       	ret

000002f0 <__vector_14>:
}

/****************************************/
// Subrutinas de Interrupcion
ISR(TIMER0_COMPA_vect) {
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
	contador_pulso++;
 30a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <contador_pulso>
 30e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <contador_pulso+0x1>
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <contador_pulso+0x1>
 318:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <contador_pulso>
	if (contador_pulso >= 400) contador_pulso = 0;
 31c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <contador_pulso>
 320:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <contador_pulso+0x1>
 324:	80 39       	cpi	r24, 0x90	; 144
 326:	91 40       	sbci	r25, 0x01	; 1
 328:	20 f0       	brcs	.+8      	; 0x332 <__vector_14+0x42>
 32a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <contador_pulso+0x1>
 32e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <contador_pulso>
	if (contador_pulso == 0)
 332:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <contador_pulso>
 336:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <contador_pulso+0x1>
 33a:	89 2b       	or	r24, r25
 33c:	21 f4       	brne	.+8      	; 0x346 <__vector_14+0x56>
	{
		PORTB |= (1 << PORTB3) | (1 << PORTB4) | (1 << PORTB5);
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	88 63       	ori	r24, 0x38	; 56
 342:	85 b9       	out	0x05, r24	; 5
 344:	44 c0       	rjmp	.+136    	; 0x3ce <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO1 / 50))
 346:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <pulse_SERVO1>
 34a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <pulse_SERVO1+0x1>
 34e:	36 95       	lsr	r19
 350:	27 95       	ror	r18
 352:	ab e7       	ldi	r26, 0x7B	; 123
 354:	b4 e1       	ldi	r27, 0x14	; 20
 356:	0e 94 44 02 	call	0x488	; 0x488 <__umulhisi3>
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <contador_pulso>
 362:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <contador_pulso+0x1>
 366:	82 17       	cp	r24, r18
 368:	93 07       	cpc	r25, r19
 36a:	21 f4       	brne	.+8      	; 0x374 <__vector_14+0x84>
	{
		PORTB &= ~(1 << PORTB3);
 36c:	85 b1       	in	r24, 0x05	; 5
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	85 b9       	out	0x05, r24	; 5
 372:	2d c0       	rjmp	.+90     	; 0x3ce <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO2 / 50))
 374:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <pulse_SERVO2>
 378:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <pulse_SERVO2+0x1>
 37c:	36 95       	lsr	r19
 37e:	27 95       	ror	r18
 380:	ab e7       	ldi	r26, 0x7B	; 123
 382:	b4 e1       	ldi	r27, 0x14	; 20
 384:	0e 94 44 02 	call	0x488	; 0x488 <__umulhisi3>
 388:	96 95       	lsr	r25
 38a:	87 95       	ror	r24
 38c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <contador_pulso>
 390:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <contador_pulso+0x1>
 394:	82 17       	cp	r24, r18
 396:	93 07       	cpc	r25, r19
 398:	21 f4       	brne	.+8      	; 0x3a2 <__vector_14+0xb2>
	{
		PORTB &= ~(1 << PORTB4);
 39a:	85 b1       	in	r24, 0x05	; 5
 39c:	8f 7e       	andi	r24, 0xEF	; 239
 39e:	85 b9       	out	0x05, r24	; 5
 3a0:	16 c0       	rjmp	.+44     	; 0x3ce <__vector_14+0xde>
	}
	else if (contador_pulso == (pulse_SERVO3 / 50))
 3a2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <pulse_SERVO3>
 3a6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <pulse_SERVO3+0x1>
 3aa:	36 95       	lsr	r19
 3ac:	27 95       	ror	r18
 3ae:	ab e7       	ldi	r26, 0x7B	; 123
 3b0:	b4 e1       	ldi	r27, 0x14	; 20
 3b2:	0e 94 44 02 	call	0x488	; 0x488 <__umulhisi3>
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <contador_pulso>
 3be:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <contador_pulso+0x1>
 3c2:	82 17       	cp	r24, r18
 3c4:	93 07       	cpc	r25, r19
 3c6:	19 f4       	brne	.+6      	; 0x3ce <__vector_14+0xde>
	{
		PORTB &= ~(1 << PORTB5);
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	8f 7d       	andi	r24, 0xDF	; 223
 3cc:	85 b9       	out	0x05, r24	; 5
	}
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <PWM1_init>:

#include "PWM1.h"

void PWM1_init(void) {
	// PB1 (OCR1A) y PB2 (OCR1B)
	DDRB |= (1 << PINB1) | (1 << PINB2);
 3e8:	84 b1       	in	r24, 0x04	; 4
 3ea:	86 60       	ori	r24, 0x06	; 6
 3ec:	84 b9       	out	0x04, r24	; 4
	
	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // Clear OC1A on compare match, set at BOTTOM (non-inverting)
 3ee:	82 ea       	ldi	r24, 0xA2	; 162
 3f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
 3f4:	82 e1       	ldi	r24, 0x12	; 18
 3f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 20000;
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	9e e4       	ldi	r25, 0x4E	; 78
 3fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 402:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 406:	08 95       	ret

00000408 <dutyCycle_PB1>:
}

void dutyCycle_PB1(uint16_t dutyCycle){
	OCR1A = dutyCycle;
 408:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 40c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 410:	08 95       	ret

00000412 <dutyCycle_PB2>:
}

void dutyCycle_PB2(uint16_t dutyCycle){
	OCR1B = dutyCycle;	
 412:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 416:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 41a:	08 95       	ret

0000041c <__divmodhi4>:
 41c:	97 fb       	bst	r25, 7
 41e:	07 2e       	mov	r0, r23
 420:	16 f4       	brtc	.+4      	; 0x426 <__divmodhi4+0xa>
 422:	00 94       	com	r0
 424:	07 d0       	rcall	.+14     	; 0x434 <__divmodhi4_neg1>
 426:	77 fd       	sbrc	r23, 7
 428:	09 d0       	rcall	.+18     	; 0x43c <__divmodhi4_neg2>
 42a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodhi4>
 42e:	07 fc       	sbrc	r0, 7
 430:	05 d0       	rcall	.+10     	; 0x43c <__divmodhi4_neg2>
 432:	3e f4       	brtc	.+14     	; 0x442 <__divmodhi4_exit>

00000434 <__divmodhi4_neg1>:
 434:	90 95       	com	r25
 436:	81 95       	neg	r24
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <__divmodhi4_neg2>:
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255

00000442 <__divmodhi4_exit>:
 442:	08 95       	ret

00000444 <__udivmodsi4>:
 444:	a1 e2       	ldi	r26, 0x21	; 33
 446:	1a 2e       	mov	r1, r26
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	fd 01       	movw	r30, r26
 44e:	0d c0       	rjmp	.+26     	; 0x46a <__udivmodsi4_ep>

00000450 <__udivmodsi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	ee 1f       	adc	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	a2 17       	cp	r26, r18
 45a:	b3 07       	cpc	r27, r19
 45c:	e4 07       	cpc	r30, r20
 45e:	f5 07       	cpc	r31, r21
 460:	20 f0       	brcs	.+8      	; 0x46a <__udivmodsi4_ep>
 462:	a2 1b       	sub	r26, r18
 464:	b3 0b       	sbc	r27, r19
 466:	e4 0b       	sbc	r30, r20
 468:	f5 0b       	sbc	r31, r21

0000046a <__udivmodsi4_ep>:
 46a:	66 1f       	adc	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	1a 94       	dec	r1
 474:	69 f7       	brne	.-38     	; 0x450 <__udivmodsi4_loop>
 476:	60 95       	com	r22
 478:	70 95       	com	r23
 47a:	80 95       	com	r24
 47c:	90 95       	com	r25
 47e:	9b 01       	movw	r18, r22
 480:	ac 01       	movw	r20, r24
 482:	bd 01       	movw	r22, r26
 484:	cf 01       	movw	r24, r30
 486:	08 95       	ret

00000488 <__umulhisi3>:
 488:	a2 9f       	mul	r26, r18
 48a:	b0 01       	movw	r22, r0
 48c:	b3 9f       	mul	r27, r19
 48e:	c0 01       	movw	r24, r0
 490:	a3 9f       	mul	r26, r19
 492:	70 0d       	add	r23, r0
 494:	81 1d       	adc	r24, r1
 496:	11 24       	eor	r1, r1
 498:	91 1d       	adc	r25, r1
 49a:	b2 9f       	mul	r27, r18
 49c:	70 0d       	add	r23, r0
 49e:	81 1d       	adc	r24, r1
 4a0:	11 24       	eor	r1, r1
 4a2:	91 1d       	adc	r25, r1
 4a4:	08 95       	ret

000004a6 <__udivmodhi4>:
 4a6:	aa 1b       	sub	r26, r26
 4a8:	bb 1b       	sub	r27, r27
 4aa:	51 e1       	ldi	r21, 0x11	; 17
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__udivmodhi4_ep>

000004ae <__udivmodhi4_loop>:
 4ae:	aa 1f       	adc	r26, r26
 4b0:	bb 1f       	adc	r27, r27
 4b2:	a6 17       	cp	r26, r22
 4b4:	b7 07       	cpc	r27, r23
 4b6:	10 f0       	brcs	.+4      	; 0x4bc <__udivmodhi4_ep>
 4b8:	a6 1b       	sub	r26, r22
 4ba:	b7 0b       	sbc	r27, r23

000004bc <__udivmodhi4_ep>:
 4bc:	88 1f       	adc	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	5a 95       	dec	r21
 4c2:	a9 f7       	brne	.-22     	; 0x4ae <__udivmodhi4_loop>
 4c4:	80 95       	com	r24
 4c6:	90 95       	com	r25
 4c8:	bc 01       	movw	r22, r24
 4ca:	cd 01       	movw	r24, r26
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
